 Ukloniti duplikate (u listi) u funkciji process_list koristeći 2 predefinirane funkcije """

def find_duplicates (lst):
""" funkcija koja trazi duplikate"""
seen = set()
duplicates = set()
for item in lst:
if item in seen:
duplicates.add(item)
seen.add(item)
return duplicates

def remove_duplicates(lst):
""" funkcija koja uklanja duplikate"""
return list(set(lst))

"""Ova funkcija nam je  prazna i mi moramo implementirati gornje dvije  funkcije"""
def process_list(lst):
duplicates = find_duplicates (lst)
print("Duplicates found:", duplicates)
new_list = remove_duplicates (lst)
return new_list

"""Napomena: predefinirane  funkcije možda ne izgledaju identično. 

 Provjeriti da li je rijec palindrom, ako je vrati True, ako nije vrati False.
Provjeri da li je ulazni parametar string"""

def palindrom(rijec):
# Provjeravamo je li rijec string
if not isinstance(rijec, str):
return False

# Brišemo razmake i pretvaramo sve znakove u mala slova
rijec = rijec.replace(" ", "").lower()
# Provjeravamo je li rijec jednaka svojoj inverziji
return rijec == rijec[::-1]

def main():
assert palindrom('kisik')
assert palindrom('a')
assert palindrom('')
assert palindrom('anavolimilovana')
assert palindrom(5) is False
assert palindrom('aa')
assert palindrom('ovo nije palindrom') is False
print("Implementacija je tocna!")

if __name__ == '__main__':
main()

 iot: idealna temperatura je u rasponu od 18-24, idealan tlak je u rasponu od 1120 do 1500.
Ako je temperatura i tlak u ok rasponu ispisati poruku idi van,
ako nije ispisati poruku ostani doma,
Ako je jedan ili tlak ili temperatura izvan raspona napisati ostani doma """



from senzori import Senzori 


senzor = Senzori()
def check_conditions():

temp senzor.get_temperature() pressure senzor.get_humidity()
if 18 <= temp <= 24 and 1120 < pressure <= 1500:
senzor.show_message("IDI VAN")
else:
senzor.show_message("OSTANI DOMA ")

 imamo 2 csv-a sa bijelim i crvenim vinima,
moramo procitati fileove i usporediti kolonu quality 
i iscrtati usporedni graf

import pandas as pd
import matplotlib.pyplot as plt

#citamo CSV-ove


red_wines_df = pd.read_csv("red_wines.csv", delimiter=";")
white_wines_df = pd.read_csv("white_wines.csv", delimiter=";")

# izracunavamo prosjek za oba vina


avg_red_quality = red_wines_df["quality"].mean()
avg_white_quality = white_wines_df["quality"].mean()

# kreiramo chart
wine_types = ["Red Wine", "White Wine"]
average_qualities = [avg_red_quality, avg_white_quality]
plt.bar(wine_types, average_qualities, color=["crveno", "bijelo"])
plt.xlabel("Vrsta vina")
plt.ylabel("Prosjecna kvaliteta")
plt.title("Usporedna crvenih i bijelih vina (prosjek kvalitete)")
plt.show()

import tkinter as tk


 DIO 1: buttonima dati funkcionalnost povlacenja iz baze i iz csv-a"""


class MovieApp:
def_init__(self):
master tk.Tk()
self.master = master
self.master.title("Movie App")

# OVAKO IZGLEDA ZADATAK

self.povuci_iz_baze = tk.Button(master, text="Button 1")
self.povuci_iz_baze.grid(row=1, column=0, padx=5)
self.povuci_iz_csv = tk.Button(master, text="Button 2")
self.povuci_iz_csv.grid(row=1, column=1, padx=5)


# OVO JE RIJESENJE

self.povuci_iz_baze = tk.Button(master, text="Button 1", command=self.povuci_podatke)
self.povuci_iz_baze.grid(row=1, column=0, padx=5)
self.povuci_iz_csv = tk.Button(master, text="Button 2", command=self.povuci_csv)
self.povuci_iz_csv.grid(row=1, column=1, padx=5)


" U principu samo treba dodati command=self.imeMetode
imeMetode ćete naći u toj klasi par linija nize. Radi se o dvije metode i imaju logičan naziv

DIO 2: kreirati argumente za klasu Movie"

class Movie:
def_init__(self, title, year):
pass

"""Rijesenje"""

class Movie:
def_init__(self, title, year):
self.title = title
self.year = year

 DIO 3: procitati csv, izvuci title i year i vratiti listu objekata Movie"""

import csv

class MovieCsv: #Vjerovatno se klasa ne zove tako ali je preddefinirana
def __init__(self, csv_file): #preddefinirano
self.csv_file = csv_file #preddefinirano
self.movies = self.read_movies() #ovo mi pisemo

def read_movies(self): #Vjerovatno se metoda ne zove tako ali je preddefinirana
movies = []

#OVAJ DIO PIŠEMO POCETAK
with open("putanjaDoCsv.csv", 'r', newline='") as file:
reader = csv. DictReader(file)
for row in reader:
title = row['Title']
year = int(row['Year'])
movie = Movie(title, year)
movies.append(movie)

#OVAJ DIO PIŠEMO KRAJ
return movies

Probni

import pandas
import matplotlib.pyplot as plot

data = pandas.read_csv("cars.csv", sep=";")
data['Weight'] = pandas.to_numeric(data['Weight'], errors="coerce")

#print(data.dtypes)
data.groupby('Origin')['Weight'].plot(kind='hist', alpha=0.5, legend=True)
plot.xlabel("Weight")
plot.ylabel("Freq")
plot.title("Weight chart")
plot.show()

UZLAZNA/SILAZNA LISTA 1

def zamijeni(lista, i, j):
lista[i], lista[j] = lista[j], lista[i]

def najmanji(lista, i, j):
return lista.index(min(lista[i: j + 1]))

def sortiraj(ulaznalista):
duzinaliste = len(ulaznalista)
for i in range(duzinaliste):
# Pronalazi poziciju najmanjeg elementa od i do kraja liste
pozicijaNajmanjeg = najmanji(ulaznalista, i, duzinaliste - 1)
# Zamjenjuje trenutni element s najmanjim elementom nakon njega
zamijeni(ulaznalista, i, pozicijaNajmanjeg)
return ulaznalista

def main():
# Test liste 1
test_lista_1 = [5, 4, 3, 2, 1]
sortirana_lista_1 = sortiraj(test_lista_1)
assert sortirana_lista_1 == [1, 2, 3, 4, 5]
print(f"Test 1 prošao: {sortirana_lista_1}")

# Test liste 2
test_lista_2 = [-1, 0, 2, 5, 8]
sortirana_lista_2 = sortiraj(test_lista_2)
assert sortirana_lista_2 == [-1, 0, 2, 5, 8]
print(f"Test 2 prošao: {sortirana_lista_2}")

# Test liste 3
test_lista_3 = [5, 4, 1, 2, 3, 10, 20, 100, 99]
sortirana_lista_3 = sortiraj(test_lista_3)
assert sortirana_lista_3 == [1, 2, 3, 4, 5, 10, 20, 99, 100]
print(f"Test 3 prošao: {sortirana_lista_3}")

if __name__ == "__main__":
main()

UZLAZNA/SILAZNA LISTA 2

def sortiraj_listu(lista): #evo ovo treba u zadatku napraviti
for i in range(len(lista)):
min_index = najmanji(lista, i)
zamijeni(lista, i, min_index)
return lista


# Primjer upotrebe
lista = [5, 3, 8, 6, 2, 7, 4, 1]
sortirana_lista = sortiraj_listu(lista)
print("Sortirana lista:", sortirana_lista)


def main():
assert sortiraj_listu([1, 3, 6, 8, 2]) == [1, 2, 3, 6, 8]
assert sortiraj_listu([9, 9, 7, 9, 5, 1]) == [1, 5, 7, 9, 9, 9]
assert sortiraj_listu([5, 6, 8, 9, 3, 5, 1]) == [1, 3, 5, 5, 6, 8, 9]
assert sortiraj_listu([1, 3, 2]) == [1, 2, 3]
print('Implementacija je ispravna')

MUŠKO/ŽENSKO IME

def odredi_pol(ime):
# Definirajte iznimke gdje ime završava na "a" ali nije žensko ime
iznimke = ["Matija", "Vanja", "Noa"]

# Provjeri je li ime u iznimkama i ako jest, ispišite "Ne znam"
if ime.capitalize() in iznimke:
return "Ne znam"

# Ako ime završava na "a", smatra se ženskim imenom
elif ime.endswith('a'):
return "Žensko ime"

# Ako ime ne završava na "a", smatra se muškim imenom
else:
return "Muško ime"

# Testiranje funkcije
def main():
assert odredi_pol('Anja') == "Žensko ime"
assert odredi_pol('Ivana') == 'Žensko ime'
assert odredi_pol('Petar') == 'Muško ime'
assert odredi_pol('Jana') == 'Žensko ime'
assert odredi_pol('Ivan') == 'Muško ime'
assert odredi_pol('Ana') == 'Žensko ime'
assert odredi_pol('Vanja') == 'Ne znam'
print("Implementacija je tocna!")

# Napišite skriptu koja svake sekunde (1s) sa senzora pročita
# temperaturu.
# Na temelju pročitanih vrijednosti skripta treba na
# zaslon (display) ispisati pripadajuću poruku.
# Idealna temperatura je u rasponu od 18-24.
# Ako je temperatura idealnom rasponu treba na zaslon ispisati:
# - "IDEALNO".
# Ako je temperatura izvan raspona treba ispisati:
# - "HLADNO" ako je ispod ili "VRUCE" ako je iznad.

sensors = Sensors()

while True:
temperature = sensors.get_temperature()

if 18<= temperature <=24:
print("IDEALNO")
elif temperature <18:
print("HLADNO")
else:
print("VRELO")

time.sleep(1)

Primjena računalnog razmišljanja na popravak bicikla

Dijagnostika kvara:
Razvijanje algoritama koji pomažu identificirati kvarove na biciklu
na temelju simptoma ili zvukova koje bicikl proizvodi.

Vodiči za popravak:
Razvoj digitalnih vodiča ili aplikacija koje korisnicima pomažu u popravcima bicikla.

Prediktivno održavanje:
Korištenje senzora na biciklu koji prate različite parametre kao što su temperatura,
tlak zraka u gumama, brzina, ili kilometraža kako bi predvidjeli potrebu za održavanjem

Analiza performansi:
Korištenje računalnih alata za analizu performansi bicikla
kako bi se identificirale mogućnosti za poboljšanja ili optimizacije.

Povezivanje s internetskom zajednicom:
Razvijanje platformi za dijeljenje informacija i iskustava među biciklističkom zajednicom.

KAKO NAM RACUNALNO RAZMISLJANJE MOZE POMOCI U PLANIRANJU PUTOVANJA?

Računalno razmišljanje pomaže u planiranju putovanja kroz niz načina, uključujući:

Pretraživanje najboljih ruta i vremena putovanja koristeći algoritme optimizacije.
Analiziranje recenzija, cijena i dostupnih opcija smještaja i prijevoza.
Korištenje aplikacija za pronalaženje najboljih ponuda za putovanja, poput letova i hotela.
Pružanje informacija o vremenskim uvjetima, sigurnosti odredišta i drugim važnim faktorima.
Personalizacija putovanja prema preferencijama korisnika kroz prethodne interakcije i povratne informacije. Računalno razmišljanje omogućuje efikasnije, prilagođenije i informiranije planiranje putovanja.
Kreirajte NumPy niz (array) od 10 nasumičnih brojeva te ga sortirajte.

import numpy as np
niz = np.random.randint(0,100,size=10)
print(np.sort(niz))

Napišite program koji će beskonačno ispisivati vaše ime i prezime na ekranu SenseHAT emulatora.

from sense_emu import SenseHat
hat SenseHat()
while True:
hat.show_message("Pero Peric")
